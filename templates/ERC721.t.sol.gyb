%{ 
  import yaml
  with open('../test-cases.yml', 'r') as file:
    config = yaml.safe_load(file)
    contracts = config["contracts"]
}%
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.4;

import {DSTest} from "@ds-test/test.sol";
import {Vm} from "@forge-std/Vm.sol";
% for variation in contracts["erc721"]["variations"]:
import {ERC721_${variation}${",ERC721_{}_ERC2309".format(variation) if variation in contracts["erc721"]["ERC2309Variations"] else ""}} from "$/ERC721_${variation}.sol";
% end
% for variation in contracts["erc721"]["variations"]:

// deploy
contract ERC721_${variation}_deploy_Test is DSTest {
    function test_deploy() public {
        ERC721_${variation} sut = new ERC721_${variation}();
    }
}
% if variation in contracts["erc721"]["ERC2309Variations"]:

// deployERC2309
contract ERC721_${variation}_deployERC2309_Test is DSTest {
    % for mintAmount in contracts["erc721"]["methods"]["ERC2309Mint"]:

    function test_deployERC2309_${mintAmount}() public {
        ERC721_${variation}_ERC2309 sut = new ERC721_${variation}_ERC2309(${mintAmount});
    }
    % end
}
% end

// mint
contract ERC721_${variation}_mint_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
    }
    % for mintAmount in contracts["erc721"]["methods"]["mint"]:

    function test_mint_${mintAmount}() public {
        sut.mint(address(0xAAAA), ${mintAmount});
    }
    % end
}

// safeMint
contract ERC721_${variation}_safeMint_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
    }
    % for mintAmount in contracts["erc721"]["methods"]["mint"]:

    function test_safeMint_${mintAmount}() public {
        sut.safeMint(address(0xAAAA), ${mintAmount});
    }
    % end
}

// burn
contract ERC721_${variation}_burn_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }
    % for tokenId in contracts["erc721"]["methods"]["burn"]:

    function test_burn_id${tokenId}() public {
        HEVM.prank(address(0xAAAA));
        sut.burn(${tokenId});
    }
    % end
}

// transfer toOwner
contract ERC721_${variation}_transferToOwner_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
        sut.mint(address(0xBBBB), 101);
    }
    % for tokenId in contracts["erc721"]["methods"]["transfer"]:

    function test_transferToOwner_id${tokenId}() public {
        HEVM.prank(address(0xAAAA));
        sut.transferFrom(address(0xAAAA), address(0xBBBB), ${tokenId});
    }
    % end
}

// transfer toNonOwner
contract ERC721_${variation}_transferToNonOwner_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }
    % for tokenId in contracts["erc721"]["methods"]["transfer"]:

    function test_transferToNonOwner_id${tokenId}() public {
        HEVM.prank(address(0xAAAA));
        sut.transferFrom(address(0xAAAA), address(0xCCCC), ${tokenId});
    }
    % end
}

// safeTransfer toOwner
contract ERC721_${variation}_safeTransferToOwner_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
        sut.mint(address(0xBBBB), 101);
    }
    % for tokenId in contracts["erc721"]["methods"]["transfer"]:

    function test_safeTransferToOwner_id${tokenId}() public {
        HEVM.prank(address(0xAAAA));
        sut.safeTransferFrom(address(0xAAAA), address(0xBBBB), ${tokenId});
    }
    % end
}

// safeTransfer toNonOwner
contract ERC721_${variation}_safeTransferToNonOwner_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }
    % for tokenId in contracts["erc721"]["methods"]["transfer"]:

    function test_safeTransferToNonOwner_id${tokenId}() public {
        HEVM.prank(address(0xAAAA));
        sut.safeTransferFrom(address(0xAAAA), address(0xCCCC), ${tokenId});
    }
    % end
}

// setApprovalForAll
contract ERC721_${variation}_setApprovalForAll_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }

    function test_setApprovalForAll() public {
        HEVM.prank(address(0xAAAA));
        sut.setApprovalForAll(address(0xCCCC), true);
    }
}

// approve
contract ERC721_${variation}_approve_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }

    % for tokenId in contracts["erc721"]["methods"]["transfer"]:

    function test_approve_id${tokenId}() public {
        HEVM.prank(address(0xAAAA));
        sut.approve(address(0xCCCC), ${tokenId});
    }
    % end
}

// balanceOf
contract ERC721_${variation}_balanceOf_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 1);
        sut.mint(address(0xBBBB), 10);
        sut.mint(address(0xCCCC), 50);
        sut.mint(address(0xDDDD), 100);
    }

    function test_balanceOf_1() view public {
        sut.balanceOf(address(0xAAAA));
    }

    function test_balanceOf_10() view public {
        sut.balanceOf(address(0xBBBB));
    }

    function test_balanceOf_50() view public {
        sut.balanceOf(address(0xCCCC));
    }

    function test_balanceOf_100() view public {
        sut.balanceOf(address(0xDDDD));
    }
}

contract ERC721_${variation}_ownerOf_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }

    function test_ownerOf_1() view public {
        sut.ownerOf(1);
    }

    function test_ownerOf_10() view public {
        sut.ownerOf(10);
    }

    function test_ownerOf_50() view public {
        sut.ownerOf(50);
    }

    function test_ownerOf_100() view public {
        sut.ownerOf(100);
    }
}

contract ERC721_${variation}_getApproved_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 101);
    }

    function test_getApproved_1() view public {
        sut.ownerOf(1);
    }

    function test_getApproved_10() view public {
        sut.ownerOf(10);
    }

    function test_getApproved_50() view public {
        sut.ownerOf(50);
    }

    function test_getApproved_100() view public {
        sut.ownerOf(100);
    }
}

// isApprovedForAll
contract ERC721_${variation}_isApprovedForAll_Test is DSTest {
    Vm internal constant HEVM = Vm(HEVM_ADDRESS);

    ERC721_${variation} internal sut;

    function setUp() public {
        sut = new ERC721_${variation}();
        sut.mint(address(0xAAAA), 10);
    }

    function test_isApprovedForAll() view public {
        sut.isApprovedForAll(address(0xAAAA), address(0xBBBB));
    }
}
% end
